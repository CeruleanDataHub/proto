// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currentLoop.proto

package currentLoop

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CurrentLoopRequest struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp            string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                int32    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Voltage              float32  `protobuf:"fixed32,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current              float32  `protobuf:"fixed32,5,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentLoopRequest) Reset()         { *m = CurrentLoopRequest{} }
func (m *CurrentLoopRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentLoopRequest) ProtoMessage()    {}
func (*CurrentLoopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e231705269d59a9, []int{0}
}

func (m *CurrentLoopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentLoopRequest.Unmarshal(m, b)
}
func (m *CurrentLoopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentLoopRequest.Marshal(b, m, deterministic)
}
func (m *CurrentLoopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentLoopRequest.Merge(m, src)
}
func (m *CurrentLoopRequest) XXX_Size() int {
	return xxx_messageInfo_CurrentLoopRequest.Size(m)
}
func (m *CurrentLoopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentLoopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentLoopRequest proto.InternalMessageInfo

func (m *CurrentLoopRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CurrentLoopRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *CurrentLoopRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CurrentLoopRequest) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *CurrentLoopRequest) GetCurrent() float32 {
	if m != nil {
		return m.Current
	}
	return 0
}

type CurrentLoopResponse struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentLoopResponse) Reset()         { *m = CurrentLoopResponse{} }
func (m *CurrentLoopResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentLoopResponse) ProtoMessage()    {}
func (*CurrentLoopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e231705269d59a9, []int{1}
}

func (m *CurrentLoopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentLoopResponse.Unmarshal(m, b)
}
func (m *CurrentLoopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentLoopResponse.Marshal(b, m, deterministic)
}
func (m *CurrentLoopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentLoopResponse.Merge(m, src)
}
func (m *CurrentLoopResponse) XXX_Size() int {
	return xxx_messageInfo_CurrentLoopResponse.Size(m)
}
func (m *CurrentLoopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentLoopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentLoopResponse proto.InternalMessageInfo

func (m *CurrentLoopResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*CurrentLoopRequest)(nil), "CurrentLoopRequest")
	proto.RegisterType((*CurrentLoopResponse)(nil), "CurrentLoopResponse")
}

func init() {
	proto.RegisterFile("currentLoop.proto", fileDescriptor_1e231705269d59a9)
}

var fileDescriptor_1e231705269d59a9 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2e, 0x2d, 0x2a,
	0x4a, 0xcd, 0x2b, 0xf1, 0xc9, 0xcf, 0x2f, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x9a, 0xc0,
	0xc8, 0x25, 0xe4, 0x8c, 0x10, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62,
	0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x64, 0xb8,
	0x38, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0xc0, 0x12, 0x08, 0x01,
	0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xd6, 0x20,
	0x08, 0x47, 0x48, 0x82, 0x8b, 0xbd, 0x2c, 0x3f, 0xa7, 0x24, 0x31, 0x3d, 0x55, 0x82, 0x45, 0x81,
	0x51, 0x83, 0x29, 0x08, 0xc6, 0x05, 0xc9, 0x40, 0x5d, 0x23, 0xc1, 0x0a, 0x91, 0x81, 0x72, 0x95,
	0x34, 0xb9, 0x84, 0x51, 0x5c, 0x54, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x8a, 0xcd, 0x49, 0x46, 0xde,
	0x5c, 0xdc, 0x48, 0x4a, 0x85, 0x6c, 0xb8, 0x78, 0x83, 0x53, 0xf3, 0x52, 0x42, 0x52, 0x73, 0x52,
	0x73, 0x53, 0x4b, 0x8a, 0x2a, 0x85, 0x84, 0xf5, 0x30, 0xfd, 0x26, 0x25, 0xa2, 0x87, 0xc5, 0x78,
	0x25, 0x06, 0x27, 0x49, 0x2e, 0xf1, 0xbc, 0xd4, 0x92, 0xf2, 0xfc, 0xa2, 0x6c, 0xbd, 0xe4, 0x94,
	0x0c, 0x3d, 0xa4, 0xb0, 0x4a, 0x62, 0x03, 0x07, 0x96, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x4e, 0x2e, 0x54, 0x41, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CurrentLoopClient is the client API for CurrentLoop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrentLoopClient interface {
	SendTelemetry(ctx context.Context, in *CurrentLoopRequest, opts ...grpc.CallOption) (*CurrentLoopResponse, error)
}

type currentLoopClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrentLoopClient(cc grpc.ClientConnInterface) CurrentLoopClient {
	return &currentLoopClient{cc}
}

func (c *currentLoopClient) SendTelemetry(ctx context.Context, in *CurrentLoopRequest, opts ...grpc.CallOption) (*CurrentLoopResponse, error) {
	out := new(CurrentLoopResponse)
	err := c.cc.Invoke(ctx, "/CurrentLoop/SendTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrentLoopServer is the server API for CurrentLoop service.
type CurrentLoopServer interface {
	SendTelemetry(context.Context, *CurrentLoopRequest) (*CurrentLoopResponse, error)
}

// UnimplementedCurrentLoopServer can be embedded to have forward compatible implementations.
type UnimplementedCurrentLoopServer struct {
}

func (*UnimplementedCurrentLoopServer) SendTelemetry(ctx context.Context, req *CurrentLoopRequest) (*CurrentLoopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTelemetry not implemented")
}

func RegisterCurrentLoopServer(s *grpc.Server, srv CurrentLoopServer) {
	s.RegisterService(&_CurrentLoop_serviceDesc, srv)
}

func _CurrentLoop_SendTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentLoopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentLoopServer).SendTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CurrentLoop/SendTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentLoopServer).SendTelemetry(ctx, req.(*CurrentLoopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrentLoop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CurrentLoop",
	HandlerType: (*CurrentLoopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTelemetry",
			Handler:    _CurrentLoop_SendTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currentLoop.proto",
}
